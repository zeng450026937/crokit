/*
 * @file chat_message_item.h
 * @date 2019-09-17
 *
 * @brief 
 */
#ifndef __CHAT_MESSAGE_ITEM_H__
#define __CHAT_MESSAGE_ITEM_H__
#include "components/base/simplelib/common_marco_define.h"

#include <cstdint>

namespace yealink
{
enum ChatItemStatus
{
    CHAT_ITEM_STATUS_INVALID,
    CHAT_ITEM_STATUS_PENDING,
    CHAT_ITEM_STATUS_SUCCESS,
    CHAT_ITEM_STATUS_FAILURE
};

class VC_EXPORT_API ChatMessageItem
{
    SIMPLE_OBJECT_DECLARE(ChatMessageItem)
public:
    friend class ChatManager;
    friend class ChatDialog;
    static ChatMessageItem CreateItem(void* data);

public:
    /* getter */
    /**
     * @brief check is private message
     * @return 
     */
    bool IsPrivate() const;
    /**
     * @brief get context of message
     * @return 
     */
    const char* GetContext() const;
    /**
     * @brief get message entity
     * @return
     * @note if message is pending or failure,
     * entity is generated by local,
     * and server return success,
     * entity is sync to entity with server sent
     */
    int64_t GetEntity() const;
    /**
     * @brief get message timestamp
     * @return 
     */
    int64_t GetTimestamp() const;
    /**
     * @brief check message is read
     * @return 
     */
    bool IsRead() const;
    /**
     * @brief get status of message, such as success, failure, pending
     * @return 
     */
    ChatItemStatus GetStatus() const;
    /**
     * @brief get entity of sender
     * @return 
     */
    const char* GetSenderEntity() const;
    /**
     * @brief get sender name
     * @return
     * @note we must get member name from room first,
     *if not found, we get sender name from this interface
     */
    const char* GetSenderDisplayText() const;
    /**
     * @brief get biz code from server
     * @return
     * @note if message not failure, bizcode is 900200
     */
    int32_t GetLastBizCode() const;
    /**
     * @brief check message is from current user
     * @return 
     */
    bool IsFromCurrentUser() const;

    /* setter */
    /**
     * @brief set read status
     * @param isRead 
     * @return
     * @note unread count will sync to dialog
     */
    bool SetReadStatus(bool isRead);
};
} // namespace yealink

#endif // __CHAT_MESSAGE_ITEM_H__
